{"meta":{"title":"Jason's Blog","subtitle":"丁昌乾_技术博客","description":"丁昌乾的博客。选择大于努力，格局决定结局","author":"JasonD","url":"https://jasondcq.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-04-09T15:14:16.000Z","updated":"2020-04-09T15:14:54.966Z","comments":false,"path":"categories/index.html","permalink":"https://jasondcq.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-09T15:13:06.000Z","updated":"2020-04-11T06:53:03.736Z","comments":false,"path":"tags/index.html","permalink":"https://jasondcq.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mac修复'CoreFoundation/CoreFoundation.h' file not found问题","slug":"Mac修复-CoreFoundation-CoreFoundation-h-file-not-found问题","date":"2020-05-03T12:54:00.000Z","updated":"2020-05-03T12:58:15.567Z","comments":true,"path":"Mac修复-CoreFoundation-CoreFoundation-h-file-not-found问题/","link":"","permalink":"https://jasondcq.github.io/Mac%E4%BF%AE%E5%A4%8D-CoreFoundation-CoreFoundation-h-file-not-found%E9%97%AE%E9%A2%98/","excerpt":"","text":"修复’CoreFoundation/CoreFoundation.h’ file not found在macOS 10.15下/System/Library/Frameworks/缺少很多头/库文件，会导致很多软件编译失败。比如:CoreFoundation（找不到#include &lt;CoreFoundation/CoreFoundation.h&gt;）解决方案如下： $ sudo mount -uw / # 根目录挂载为可读写，否则无法在/usr/下建立文件，本修改重启前有效。$ sudo ln -s &quot;$(xcrun --show-sdk-path)/usr/include&quot; /usr/include $ export SDKROOT=&quot;$(xcrun --show-sdk-path)&quot; # 设置环境变量$ echo &quot;export SDKROOT=\\&quot;\\$(xcrun --show-sdk-path)\\&quot;&quot; &gt;&gt; ~/.bash_profile # zsh的自行搞定$ sudo DevToolsSecurity -enable # 将系统置于开发模式","categories":[{"name":"mac工具","slug":"mac工具","permalink":"https://jasondcq.github.io/categories/mac%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"mac工具","slug":"mac工具","permalink":"https://jasondcq.github.io/tags/mac%E5%B7%A5%E5%85%B7/"}],"author":"JasonD"},{"title":"Mac使用brew安装memcached、redis、mysql","slug":"Mac使用brew安装memcached","date":"2020-04-24T06:13:00.000Z","updated":"2020-05-03T13:09:52.928Z","comments":true,"path":"Mac使用brew安装memcached/","link":"","permalink":"https://jasondcq.github.io/Mac%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85memcached/","excerpt":"","text":"HomeBrew安装1、homebrew 是 macOS 缺失的软件包管理器,譬如可以下载 mysql、redis、wget 等等.操作系统：macOS High Sierra Version 10.14.52、Homebrew 会将软件包安装到独立目录,并将其文件软链接至 /usr/local . Homebrew 不会将文件安装到它本身目录之外,所以您可将 Homebrew 安装到任意位置.3、/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;4、官方网站https://brew.sh/ HomeBrew的基本使用方法：1234567brew search ** &#x2F;&#x2F;查找某个软件包brew list &#x2F;&#x2F;列出已经安装的软件的包brew install ** &#x2F;&#x2F;安装某个软件包,默认安装的是稳定版本brew uninstall **&#x2F;&#x2F;卸载某个软件的包brew upgrade ** &#x2F;&#x2F;更新某个软件包brew info ** &#x2F;&#x2F;查看指定软件包的说明brew cache clean &#x2F;&#x2F;清理缓存 memcached安装1、使用命令brew info memcached检查是否已安装memcached及其依赖包情况 avatar 2、如上图所示，memcached的依赖包为libevent，如果未安装libevent（会打个红色的X），则需要首先查看libevent安装的依赖包，检查libevent的依赖包是否安装，使用命令brew info libevent: avatar 3、未安装的依赖会打一个红色的X，安装打X依赖 12brew install doxygenbrew install libtool 4、依赖包安装完后 12brew install libeventbrew install memcached 5、安装完成，启动服务 12345678&#x2F;&#x2F;启动brew services start memcached&#x2F;&#x2F;停止brew services stop memcached&#x2F;&#x2F;重启brew services restart memcached&#x2F;&#x2F;查看所有运行的服务brew services list redis安装1、安装包管理器最新版本brew install redis 2、安装指定版本brew install redis@4.0 3、/usr/local/etc 下修改redis.config找到daemonize no 改成yes以守护进程的方式启动配置环境变量echo ‘export PATH=”/usr/local/opt/redis@3.2/bin:$PATH”‘ &gt;&gt; ~/.zshrc 4、启动:brew services start redis或者使用redis-server /usr/local/etc/redis.conf启动 5、查看进程ps axu | grep redis 6、关闭redis-cli shutdown 7、杀死sudo pkill redis-server 安装 mysql1234brew updatebrew install mysqlbrew info mysql&#96; 运行 brew service start mysql 可以后台启动 mysql,运行 mysql.server start 前台启动 mysql(关闭控制台,服务停止),当安装完成之后需要进行一些设置。 设置密码需先启动 mysql 服务 mysql_secure_installation 设置完之后测试一下，连接mysql: mysql -u root -p 123456 配置自启动1234567mkdir -p ~&#x2F;Library&#x2F;LaunchAgentsln -sfv &#x2F;usr&#x2F;local&#x2F;opt&#x2F;mysql&#x2F;*.plist ~&#x2F;Library&#x2F;LaunchAgentsfind &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql&#x2F; -name &quot;homebrew.mxcl.mysql.plist&quot; -exec cp &#123;&#125; ~&#x2F;Library&#x2F;LaunchAgents&#x2F; \\;launchctl load -w ~&#x2F;Library&#x2F;LaunchAgents&#x2F;homebrew.mxcl.mysql.plist","categories":[{"name":"mac工具","slug":"mac工具","permalink":"https://jasondcq.github.io/categories/mac%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"mac工具","slug":"mac工具","permalink":"https://jasondcq.github.io/tags/mac%E5%B7%A5%E5%85%B7/"}],"author":"JasonD"},{"title":"Vuejs快速学习系列(三)  组件化开发","slug":"Vuejs快速学习系列-三-组件化开发","date":"2020-04-13T11:41:00.000Z","updated":"2020-04-23T12:38:24.067Z","comments":true,"path":"Vuejs快速学习系列-三-组件化开发/","link":"","permalink":"https://jasondcq.github.io/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%B8%89-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/","excerpt":"","text":"认识组件化什么是组件化？如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展，但如果我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了，这就是组件化的思想。 avatar Vue组件化思想组件化是Vue.js中的重要思想,它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用,任何的应用都会被抽象成一颗组件树 avatar 有了组件化的思想，我们在之后的开发中就要充分的利用它,尽可能的将页面拆分成一个个小的、可复用的组件,这样让我们的代码更加方便组织和管理，并且扩展性也更强。 注册组件注册组件的基本步骤 组件的使用分成三个步骤1、创建组件构造器2、注册组件3、使用组件 avatar 我们来看看通过代码如何注册组件，和直接使用一个div看起来并没有什么区别，但是我们可以设想，如果很多地方都要显示这样的信息，我们是不是就可以直接使用&lt;my-cpn&gt;&lt;/my-cpn&gt;来完成呢？ avatar","categories":[{"name":"Vuejs快速学习系列","slug":"Vuejs快速学习系列","permalink":"https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Vuejs","slug":"Vuejs","permalink":"https://jasondcq.github.io/tags/Vuejs/"}],"author":"JasonD"},{"title":"Vuejs快速学习系列(二)  基础语法","slug":"Vuejs快速学习系列-二-基础语法","date":"2020-04-13T08:18:00.000Z","updated":"2020-04-13T13:40:56.100Z","comments":true,"path":"Vuejs快速学习系列-二-基础语法/","link":"","permalink":"https://jasondcq.github.io/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"插值操作如何将data中的文本数据，插入到html中呢？可以通过Mustache语法(也就是双大括号),我们可以像下面这样来使用，并且数据是响应式的: avatar v-once在某些情况下，我们可能不希望界面随意的跟随改变,这个时候，我们就可以使用一个Vue的指令,v-once该指令后面不需要跟任何表达式,该指令表示元素和组件只渲染一次，不会随着数据的改变而改变,代码如下： avatar v-html当我们从服务器请求到的数据本身就是一个html代码，如果我们直接通过Mustache来输出，会将html代码也一起输出,但是我们可能希望的是按照html格式进行解析，并且显示对应的内容,这时候就可以使用v-html指令, 该指令后面往往会跟上一个string类型, 会将string的html解析出来并且进行渲染。 avatar v-text指令v-text作用和Mustache比较相似,都是用于将数据显示在界面中,v-text通常情况下，接受一个string类型. avatar v-pre指令v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法,比如下面的代码：第一个h2元素中的内容会被编译解析出来对应的内容；第二个h2元素中会直接显示 avatar 绑定属性前面我们学习的指令主要作用是将值插入到我们模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定，比如动态绑定a元素的href属性, 比如动态绑定img元素的src属性,这个时候，我们可以使用v-bind指令。 v-bind基础指令v-bind用于绑定一个或多个属性值，或者向另一个组件传递props值，在开发中，有哪些属性需要动态进行绑定呢？还是有很多的，比如图片的链接src、网站的链接href、动态绑定一些类、样式等等。通过Vue实例中的data绑定元素的src和href，代码如下： avatar v-bind语法糖指令v-bind有一个对应的语法糖，也就是简写方式,在开发中，我们通常会使用语法糖的形式，因为这样更加简洁,简写方式如下: avatar v-bind绑定class很多时候，我们希望动态的来切换class，比如:当数据为某个状态时，字体显示红色,当数据另一个状态时，字体显示黑色。绑定class有两种方式： 对象语法 数组语法 1、对象语法的含义是:class后面跟的是一个对象，有下面这些用法：用法一：直接通过{}绑定一个类例：html&lt;h2 :class=&quot;{&#39;active&#39;: isActive}&quot;&gt;Hello World&lt;/h2&gt; 用法二：也可以通过判断，传入多个值例：&lt;h2 :class=&quot;{&#39;active&#39;: isActive, &#39;line&#39;: isLine}&quot;&gt;Hello World&lt;/h2&gt; 用法三：和普通的类同时存在，并不冲突注：如果isActive和isLine都为true，那么会有title/active/line三个类例：&lt;h2 class=&quot;title&quot; :class=&quot;{&#39;active&#39;: isActive, &#39;line&#39;: isLine}&quot;&gt;Hello World&lt;/h2&gt; 用法四：如果过于复杂，可以放在一个methods或者computed中注：classes是一个计算属性例：&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt; 2、数组语法的含义是:class后面跟的是一个数组，有下面这些用法：用法一：直接通过{}绑定一个类例：&lt;h2 :class=&quot;[&#39;active&#39;]&quot;&gt;Hello World&lt;/h2&gt; 用法二：也可以传入多个值例：&lt;h2 :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt; 用法三：和普通的类同时存在，并不冲突注：会有title/active/line三个类例：&lt;h2 class=&quot;title&quot; :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt; v-bind绑定style我们可以利用v-bind:style来绑定一些CSS内联样式,在写CSS属性名的时候，比如font-size,我们可以使用驼峰式 (camelCase) fontSize,或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’,绑定class有两种方式: 对象语法 1、代码:style=&quot;{color: currentColor, fontSize: fontSize + &#39;px&#39;}&quot;,style后面跟的是一个对象类型； 2、对象的key是CSS属性名称 3、对象的value是具体赋的值，值可以来自于data中的属性 数组语法 1、代码&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;,style后面跟的是一个数组类型多个值以，分割即可。 计算属性什么是计算属性？在模板中可以直接通过插值语法显示一些data中的数据，但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示，比如我们有firstName和lastName两个变量，我们需要显示完整的名称，但是如果多个地方都需要显示完整的名称，我们就需要写多个 ,这时候我们可以将上面的代码换成计算属性。计算属性是写在实例的computed选项中，如下： avatar avatar 计算属性中也可以进行一些更加复杂的操作，比如下面的例子： avatar 计算属性的setter和getter每个计算属性都包含一个getter和一个setter, 在上面的例子中，我们只是使用getter来读取,在某些情况下，你也可以提供一个setter方法（不常用）,在需要写setter的时候，代码如下： avatar 计算属性的缓存我们可能会考虑这样的一个问题, methods和computed看起来都可以实现我们的功能,那么为什么还要多一个计算属性这个东西呢？原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。 avatar avatar 事件监听在前端开发中，我们需要经常和用户交互，这个时候，我们就必须监听用户发生交互的时间，比如点击、拖拽、键盘事件等等。在Vue中如何监听事件呢？使用v-on指令 v-on基础我们用一个监听按钮的点击事件，来简单看看v-on的使用,下面的代码中，我们使用了v-on:click=&quot;counter++”,另外，我们可以将事件指向一个在methods中定义的函数 avatar avatar 指令v-on也有对应的语法糖v-on:click可以写成@click avatar v-on参数当通过methods中定义方法，以供@click调用时，需要注意参数问题,情况一如果该方法不需要额外参数，那么方法后的()可以不添加,但是注意如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去,情况二如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件: avatar avatar v-on修饰符在某些情况下，我们拿到event的目的可能是进行一些事件处理,Vue提供了修饰符来帮助我们方便的处理一些事件.stop - 调用 event.stopPropagation(),.prevent - 调用 event.preventDefault(), .{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调,.native - 监听组件根元素的原生事件,.once - 只触发一次回调 avatar 条件判断v-if、v-else-if、v-else指令v-if、v-else-if、v-else这三个指令与JavaScript的条件语句if、else、else if类似,Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件,简单的案例演示: avatar avatar 原理v-if后面的条件为false时，对应的元素以及其子元素不会渲染,也就是根本没有不会有对应的标签出现在DOM中。 v-show指令v-show的用法和v-if非常相似，也用于决定一个元素是否渲染,v-if和v-show都可以决定一个元素是否渲染，那么开发中我们如何选择呢？v-if当条件为false时，压根不会有对应的元素在DOM中,v-show当条件为false时，仅仅是将元素的display属性设置为none而已。开发中如何选择呢？当需要在显示与隐藏之间切片很频繁时，使用v-show,当只有一次切换时，通过使用v-if avatar 循环遍历v-for遍历数组当我们有一组数据需要进行渲染时，我们就可以使用v-for来完成,v-for的语法类似于JavaScript中的for循环,格式如下：item in items的形式。如果在遍历的过程中不需要使用索引值-for=&quot;movie in movies&quot;依次从movies中取出movie，并且在元素的内容中，我们可以使用Mustache语法，来使用movie,如果在遍历的过程中，我们需要拿到元素在数组中的索引值呢？语法格式：v-for=(item, index) in items其中的index就代表了取出的item在原数组的索引值. avatar v-for遍历对象指令v-for可以用户遍历对象,比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来 avatar 组件的key属性官方推荐我们在使用v-for时，给对应的元素或组件添加上一个:key属性,key的作用主要是为了高效的更新虚拟DOM 检测数组更新因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新,Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。push()、pop()、shift()、unshift()、splice()、sort()、reverse()； avatar v-model表单绑定v-model表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单,Vue中使用v-model指令来实现表单元素和数据的双向绑定。当我们在输入框输入内容时，因为input中的v-model绑定了message，所以会实时将输入的内容传递给message，message发生改变,当message发生改变时，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生响应的改变,所以，通过v-model实现了双向的绑定 avatar 当然，我们也可以将v-model用于textarea元素 avatar v-model原理指令v-model其实是一个语法糖，它的背后本质上是包含两个操作。1.v-bind绑定一个value属性2.v-on指令给当前元素绑定input事件也就是说下面的代码：等同于下面的代码: avatar v-model：radio当存在多个单选框时 avatar v-model：checkbox复选框分为两种情况：单个勾选框和多个勾选框 单个勾选框1、v-model即为布尔值2、此时input的value并不影响v-model的值 多个复选框1、当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组2、当选中某一个时，就会将input的value添加到数组中 avatar avatar v-model：select和checkbox一样，select也分单选和多选两种情况 单选：只能选中一个值1、v-model绑定的是一个值2、当我们选中option中的一个时，会将它对应的value赋值到mySelect中 多选：可以选中多个值1、v-model绑定的是一个数组2、当选中多个值时，就会将选中的option对应的value添加到数组mySelects中 avatar avatar avatar","categories":[{"name":"Vuejs快速学习系列","slug":"Vuejs快速学习系列","permalink":"https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Vuejs","slug":"Vuejs","permalink":"https://jasondcq.github.io/tags/Vuejs/"}],"author":"JasonD"},{"title":"Vuejs快速学习系列(一)   Vue初体验与MVVM","slug":"认识Vuejs","date":"2020-04-11T08:46:00.000Z","updated":"2020-04-13T13:40:56.101Z","comments":true,"path":"认识Vuejs/","link":"","permalink":"https://jasondcq.github.io/%E8%AE%A4%E8%AF%86Vuejs/","excerpt":"","text":"简单认识VuejsVue读作/vju:/是一个渐进式的框架，这意味着你可以将Vue作为你应用的一部分嵌入其中，也可以使用Vue核心库及其生态系统，Core+Vue-router+Vuex实现各种各样的业务需求，带来更丰富的交互体验。 Vue的特点 1.解耦视图和数据；2.可复用组件；3.前端路由技术；4.状态管理；5.虚拟DOM； Hello Vuejs我们来编写我们的第一个Vue程序，体验一下Vue的响应式，截取代码如下： avatar 代码做了什么事情？我们来阅读JavaScript代码，会发现创建了一个Vue对象,在创建Vue对象的时候，传入了一些、options：{}，{}中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上,{}中包含了data属性,该属性中通常会存储一些数据,这些数据可以是我们直接定义出来的，比如像上面这样;也可能是来自网络，从服务器加载的。当浏览器执行到10~13行代码显然出对应的HTML，执行第16行代码创建Vue实例，并且对原HTML进行解析和修改。 Vue列表显示现在，我们来展示一个更加复杂的数据：数据列表；当我们现在从服务器请求过来一个列表，希望展示到html中，截取代码如下： avatar avatar 在html代码中，使用v-for指令,是不是变得So Easy，我们再也不需要在JavaScript代码中完成DOM的拼接相关操作了。而且，它还是响应式的，当我们数组中的数据发生改变时，界面会自动改变。 Vue中的MVVM我们来看Vue的MVVM，图示如下： avatar View层： 视图层在我们前端开发中，通常就是DOM层主要的作用是给用户展示各种信息 Model层: 数据层数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据 VueModel层： 视图模型层视图模型层是View和Model沟通的桥梁一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data Vue的options我们在创建Vue实例的时候，传入了一个对象options，这个options中可以包含哪些选项呢？一般开发中主要掌握以下几点： el： 1、类型：string | HTMLElement 2、作用：决定之后Vue实例会管理哪一个DOM data： 1、类型：Object | Function （组件当中data必须是一个函数） 2、作用：Vue实例对应的数据对象 methods： 1、类型：{ [key: string]: Function } 2、作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用 Vue的生命周期生命周期流程图： avatar avatar","categories":[{"name":"Vuejs快速学习系列","slug":"Vuejs快速学习系列","permalink":"https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Vuejs","slug":"Vuejs","permalink":"https://jasondcq.github.io/tags/Vuejs/"}],"author":"JasonD"}],"categories":[{"name":"mac工具","slug":"mac工具","permalink":"https://jasondcq.github.io/categories/mac%E5%B7%A5%E5%85%B7/"},{"name":"Vuejs快速学习系列","slug":"Vuejs快速学习系列","permalink":"https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"mac工具","slug":"mac工具","permalink":"https://jasondcq.github.io/tags/mac%E5%B7%A5%E5%85%B7/"},{"name":"Vuejs","slug":"Vuejs","permalink":"https://jasondcq.github.io/tags/Vuejs/"}]}