<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s Blog</title>
  
  <subtitle>丁昌乾_技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jasondcq.github.io/"/>
  <updated>2020-04-24T13:21:21.516Z</updated>
  <id>https://jasondcq.github.io/</id>
  
  <author>
    <name>JasonD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac使用brew安装memcached、redis</title>
    <link href="https://jasondcq.github.io/Mac%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85memcached/"/>
    <id>https://jasondcq.github.io/Mac%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85memcached/</id>
    <published>2020-04-24T06:13:00.000Z</published>
    <updated>2020-04-24T13:21:21.516Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HomeBrew的基本使用方法："><a href="#HomeBrew的基本使用方法：" class="headerlink" title="HomeBrew的基本使用方法："></a>HomeBrew的基本使用方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew search **  &#x2F;&#x2F;查找某个软件包</span><br><span class="line">brew list  &#x2F;&#x2F;列出已经安装的软件的包</span><br><span class="line">brew install ** &#x2F;&#x2F;安装某个软件包,默认安装的是稳定版本</span><br><span class="line">brew uninstall **&#x2F;&#x2F;卸载某个软件的包</span><br><span class="line">brew upgrade ** &#x2F;&#x2F;更新某个软件包</span><br><span class="line">brew info ** &#x2F;&#x2F;查看指定软件包的说明</span><br><span class="line">brew cache clean &#x2F;&#x2F;清理缓存</span><br></pre></td></tr></table></figure><h4 id="memcached安装"><a href="#memcached安装" class="headerlink" title="memcached安装"></a>memcached安装</h4><p>1、使用命令<code>brew info memcached</code>检查是否已安装memcached及其依赖包情况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/mactool/img/img_1.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>2、如上图所示，<code>memcached</code>的依赖包为<code>libevent</code>，如果未安装<code>libevent</code>（会打个红色的X），则需要首先查看<code>libevent</code>安装的依赖包，检查<code>libevent</code>的依赖包是否安装，使用命令<code>brew info libevent</code>:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/mactool/img/img_2.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>3、未安装的依赖会打一个红色的X，安装打X依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install doxygen</span><br><span class="line">brew install libtool</span><br></pre></td></tr></table></figure><p>4、依赖包安装完后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install libevent</span><br><span class="line">brew install memcached</span><br></pre></td></tr></table></figure><p>5、安装完成，启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;启动</span><br><span class="line">brew services start memcached</span><br><span class="line">&#x2F;&#x2F;停止</span><br><span class="line">brew services stop memcached</span><br><span class="line">&#x2F;&#x2F;重启</span><br><span class="line">brew services restart memcached</span><br><span class="line">&#x2F;&#x2F;查看所有运行的服务</span><br><span class="line">brew services list</span><br></pre></td></tr></table></figure><h4 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h4><p>1、安装包管理器最新版本<code>brew install redis</code></p><p>2、安装指定版本<code>brew install redis@4.0</code></p><p>3、<code>/usr/local/etc</code> 下修改<code>redis.config</code><br>找到<code>daemonize no</code> 改成<code>yes</code>以守护进程的方式启动配置环境变量echo ‘export PATH=”/usr/local/opt/redis@3.2/bin:$PATH”‘ &gt;&gt; ~/.zshrc</p><p>4、启动:<code>brew services start redis</code>或者使用<code>redis-server /usr/local/etc/redis.conf</code>启动</p><p>5、查看进程<code>ps axu | grep redis</code></p><p>6、关闭<code>redis-cli shutdown</code></p><p>7、杀死<code>sudo pkill redis-server</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HomeBrew的基本使用方法：&quot;&gt;&lt;a href=&quot;#HomeBrew的基本使用方法：&quot; class=&quot;headerlink&quot; title=&quot;HomeBrew的基本使用方法：&quot;&gt;&lt;/a&gt;HomeBrew的基本使用方法：&lt;/h4&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="mac工具" scheme="https://jasondcq.github.io/categories/mac%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mac工具" scheme="https://jasondcq.github.io/tags/mac%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs快速学习系列(三)  组件化开发</title>
    <link href="https://jasondcq.github.io/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%B8%89-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>https://jasondcq.github.io/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%B8%89-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</id>
    <published>2020-04-13T11:41:00.000Z</published>
    <updated>2020-04-23T12:38:24.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识组件化"><a href="#认识组件化" class="headerlink" title="认识组件化"></a>认识组件化</h3><h4 id="什么是组件化？"><a href="#什么是组件化？" class="headerlink" title="什么是组件化？"></a>什么是组件化？</h4><p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展，但如果我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了，这就是组件化的思想。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/cpnimg_1_1.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a>Vue组件化思想</h4><p>组件化是Vue.js中的重要思想,它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用,任何的应用都会被抽象成一颗组件树</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/cpnimg_2.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>有了组件化的思想，我们在之后的开发中就要充分的利用它,尽可能的将页面拆分成一个个小的、可复用的组件,这样让我们的代码更加方便组织和管理，并且扩展性也更强。</p><h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><h4 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h4><ul><li>组件的使用分成三个步骤<br>1、创建组件构造器<br>2、注册组件<br>3、使用组件</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/cpn/img_3.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>我们来看看通过代码如何注册组件，和直接使用一个<code>div</code>看起来并没有什么区别，但是我们可以设想，如果很多地方都要显示这样的信息，我们是不是就可以直接使用<code>&lt;my-cpn&gt;&lt;/my-cpn&gt;</code>来完成呢？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/cpn/img_4.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;认识组件化&quot;&gt;&lt;a href=&quot;#认识组件化&quot; class=&quot;headerlink&quot; title=&quot;认识组件化&quot;&gt;&lt;/a&gt;认识组件化&lt;/h3&gt;&lt;h4 id=&quot;什么是组件化？&quot;&gt;&lt;a href=&quot;#什么是组件化？&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Vuejs快速学习系列" scheme="https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Vuejs" scheme="https://jasondcq.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs快速学习系列(二)  基础语法</title>
    <link href="https://jasondcq.github.io/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://jasondcq.github.io/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-04-13T08:18:00.000Z</published>
    <updated>2020-04-13T13:40:56.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h3><p>如何将<code>data</code>中的文本数据，插入到<code>html</code>中呢？可以通过<code>Mustache</code>语法(也就是双大括号),我们可以像下面这样来使用，并且数据是响应式的:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_7.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>在某些情况下，我们可能不希望界面随意的跟随改变,这个时候，我们就可以使用一个Vue的指令,<code>v-once</code>该指令后面不需要跟任何表达式,该指令表示元素和组件只渲染一次，不会随着数据的改变而改变,代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_8.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>当我们从服务器请求到的数据本身就是一个<code>html</code>代码，如果我们直接通过<code>Mustache</code>来输出，会将<code>html</code>代码也一起输出,但是我们可能希望的是按照<code>html</code>格式进行解析，并且显示对应的内容,这时候就可以使用<code>v-html</code>指令, 该指令后面往往会跟上一个string类型, 会将string的html解析出来并且进行渲染。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_9.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>指令<code>v-text</code>作用和<code>Mustache</code>比较相似,都是用于将数据显示在界面中,<code>v-text</code>通常情况下，接受一个<code>string</code>类型.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_10.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>指令<code>v-pre</code>用于跳过这个元素和它子元素的编译过程，用于显示原本的<code>Mustache</code>语法,比如下面的代码：第一个<code>h2</code>元素中的内容会被编译解析出来对应的内容；第二个<code>h2</code>元素中会直接显示<code></code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_11.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><p>前面我们学习的指令主要作用是将值插入到我们模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定，比如动态绑定<code>a</code>元素的<code>href</code>属性, 比如动态绑定<code>img</code>元素的<code>src</code>属性,这个时候，我们可以使用<code>v-bind</code>指令。</p><h4 id="v-bind基础"><a href="#v-bind基础" class="headerlink" title="v-bind基础"></a>v-bind基础</h4><p>指令<code>v-bind</code>用于绑定一个或多个属性值，或者向另一个组件传递<code>props</code>值，在开发中，有哪些属性需要动态进行绑定呢？还是有很多的，比如图片的链接<code>src</code>、网站的链接<code>href</code>、动态绑定一些类、样式等等。通过Vue实例中的<code>data</code>绑定元素的<code>src</code>和<code>href</code>，代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_12.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-bind语法糖"><a href="#v-bind语法糖" class="headerlink" title="v-bind语法糖"></a>v-bind语法糖</h4><p>指令<code>v-bind</code>有一个对应的语法糖，也就是简写方式,在开发中，我们通常会使用语法糖的形式，因为这样更加简洁,简写方式如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_13.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-bind绑定class"><a href="#v-bind绑定class" class="headerlink" title="v-bind绑定class"></a>v-bind绑定class</h4><p>很多时候，我们希望动态的来切换<code>class</code>，比如:当数据为某个状态时，字体显示红色,当数据另一个状态时，字体显示黑色。绑定class有两种方式：</p><ul><li>对象语法</li><li>数组语法</li></ul><p>1、对象语法的含义是:class后面跟的是一个对象，有下面这些用法：<br>用法一：直接通过{}绑定一个类<br>例：<code>html&lt;h2 :class=&quot;{&#39;active&#39;: isActive}&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法二：也可以通过判断，传入多个值<br>例：<code>&lt;h2 :class=&quot;{&#39;active&#39;: isActive, &#39;line&#39;: isLine}&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法三：和普通的类同时存在，并不冲突<br>注：如果isActive和isLine都为true，那么会有title/active/line三个类<br>例：<code>&lt;h2 class=&quot;title&quot; :class=&quot;{&#39;active&#39;: isActive, &#39;line&#39;: isLine}&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<br>例：<code>&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>2、数组语法的含义是:class后面跟的是一个数组，有下面这些用法：<br>用法一：直接通过{}绑定一个类<br>例：<code>&lt;h2 :class=&quot;[&#39;active&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法二：也可以传入多个值<br>例：<code>&lt;h2 :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法三：和普通的类同时存在，并不冲突<br>注：会有title/active/line三个类<br>例：<code>&lt;h2 class=&quot;title&quot; :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code></p><h4 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-bind绑定style</h4><p>我们可以利用<code>v-bind:style</code>来绑定一些CSS内联样式,在写CSS属性名的时候，比如<code>font-size</code>,我们可以使用驼峰式 (camelCase)  <code>fontSize</code>,或短横线分隔 (kebab-case，记得用单引号括起来) <code>‘font-size’</code>,绑定class有两种方式:</p><ul><li><p>对象语法<br>  1、代码<code>:style=&quot;{color: currentColor, fontSize: fontSize + &#39;px&#39;}&quot;</code>,style后面跟的是一个对象类型；<br>  2、对象的key是CSS属性名称<br>  3、对象的value是具体赋的值，值可以来自于data中的属性</p></li><li><p>数组语法<br>  1、代码<code>&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</code>,style后面跟的是一个数组类型多个值以，分割即可。</p></li></ul><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><h4 id="什么是计算属性？"><a href="#什么是计算属性？" class="headerlink" title="什么是计算属性？"></a>什么是计算属性？</h4><p>在模板中可以直接通过插值语法显示一些<code>data</code>中的数据，但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示，比如我们有<code>firstName</code>和<code>lastName</code>两个变量，我们需要显示完整的名称，但是如果多个地方都需要显示完整的名称，我们就需要写多个<code> </code>,这时候我们可以将上面的代码换成计算属性。计算属性是写在实例的<code>computed</code>选项中，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_14.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_15.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>计算属性中也可以进行一些更加复杂的操作，比如下面的例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_16.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的setter和getter</h4><p>每个计算属性都包含一个<code>getter</code>和一个<code>setter</code>, 在上面的例子中，我们只是使用<code>getter</code>来读取,在某些情况下，你也可以提供一个<code>setter</code>方法（不常用）,在需要写<code>setter</code>的时候，代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_17.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="计算属性的缓存"><a href="#计算属性的缓存" class="headerlink" title="计算属性的缓存"></a>计算属性的缓存</h4><p>我们可能会考虑这样的一个问题, <code>methods</code>和<code>computed</code>看起来都可以实现我们的功能,那么为什么还要多一个计算属性这个东西呢？原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_18.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_19.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>在前端开发中，我们需要经常和用户交互，这个时候，我们就必须监听用户发生交互的时间，比如点击、拖拽、键盘事件等等。在Vue中如何监听事件呢？使用<code>v-on</code>指令</p><h4 id="v-on基础"><a href="#v-on基础" class="headerlink" title="v-on基础"></a>v-on基础</h4><p>我们用一个监听按钮的点击事件，来简单看看<code>v-on</code>的使用,下面的代码中，我们使用了<code>v-on:click=&quot;counter++”</code>,另外，我们可以将事件指向一个在<code>methods</code>中定义的函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_20.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_21.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>指令<code>v-on</code>也有对应的语法糖<code>v-on:click</code>可以写成<code>@click</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_22.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a>v-on参数</h4><p>当通过<code>methods</code>中定义方法，以供<code>@click</code>调用时，需要注意参数问题,情况一如果该方法不需要额外参数，那么方法后的()可以不添加,但是注意如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去,情况二如果需要同时传入某个参数，同时需要<code>event</code>时，可以通过<code>$event</code>传入事件:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_23.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_24.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h4><p>在某些情况下，我们拿到<code>event</code>的目的可能是进行一些事件处理,Vue提供了修饰符来帮助我们方便的处理一些事件<code>.stop</code> - 调用 <code>event.stopPropagation()</code>,<code>.prevent</code> - 调用 <code>event.preventDefault()</code>, .{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调,<code>.native</code> - 监听组件根元素的原生事件,<code>.once</code> - 只触发一次回调</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_25.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h4><p>指令<code>v-if、v-else-if、v-else</code>这三个指令与JavaScript的条件语句<code>if、else、else if</code>类似,Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件,简单的案例演示:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_26.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_27.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>原理<code>v-if</code>后面的条件为<code>false</code>时，对应的元素以及其子元素不会渲染,也就是根本没有不会有对应的标签出现在DOM中。</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>指令<code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染,v-if和v-show都可以决定一个元素是否渲染，那么开发中我们如何选择呢？<code>v-if</code>当条件为<code>false</code>时，压根不会有对应的元素在DOM中,<code>v-show</code>当条件为<code>false</code>时，仅仅是将元素的<code>display</code>属性设置为<code>none</code>而已。开发中如何选择呢？当需要在显示与隐藏之间切片很频繁时，使用<code>v-show</code>,当只有一次切换时，通过使用<code>v-if</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_30.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><h4 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h4><p>当我们有一组数据需要进行渲染时，我们就可以使用<code>v-for</code>来完成,<code>v-for</code>的语法类似于<code>JavaScript</code>中的<code>for</code>循环,格式如下：<code>item in items</code>的形式。<br>如果在遍历的过程中不需要使用索引值<code>-for=&quot;movie in movies&quot;</code>依次从movies中取出movie，并且在元素的内容中，我们可以使用Mustache语法，来使用movie,如果在遍历的过程中，我们需要拿到元素在数组中的索引值呢？语法格式：<code>v-for=(item, index) in items</code>其中的<code>index</code>就代表了取出的<code>item</code>在原数组的索引值.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_31.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h4><p>指令<code>v-for</code>可以用户遍历对象,比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_32.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="组件的key属性"><a href="#组件的key属性" class="headerlink" title="组件的key属性"></a>组件的key属性</h4><p>官方推荐我们在使用<code>v-for</code>时，给对应的元素或组件添加上一个<code>:key</code>属性,<code>key</code>的作用主要是为了高效的更新虚拟DOM</p><h4 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h4><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新,Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。<code>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code>；</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_33.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><h4 id="表单绑定v-model"><a href="#表单绑定v-model" class="headerlink" title="表单绑定v-model"></a>表单绑定v-model</h4><p>表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单,Vue中使用<code>v-model</code>指令来实现表单元素和数据的双向绑定。<br>当我们在输入框输入内容时，因为<code>input</code>中的<code>v-model</code>绑定了<code>message</code>，所以会实时将输入的内容传递给<code>message</code>，<code>message</code>发生改变,当<code>message</code>发生改变时，因为上面我们使用Mustache语法，将<code>message</code>的值插入到DOM中，所以DOM会发生响应的改变,所以，通过<code>v-model</code>实现了双向的绑定</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_34.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>当然，我们也可以将<code>v-model</code>用于<code>textarea</code>元素</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_35.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h4><p>指令<code>v-model</code>其实是一个语法糖，它的背后本质上是包含两个操作。<br>1.<code>v-bind</code>绑定一个<code>value</code>属性<br>2.<code>v-on</code>指令给当前元素绑定<code>input</code>事件<br>也就是说下面的代码：等同于下面的代码:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_36.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-model：radio"><a href="#v-model：radio" class="headerlink" title="v-model：radio"></a>v-model：radio</h4><p>当存在多个单选框时</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_37.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-model：checkbox"><a href="#v-model：checkbox" class="headerlink" title="v-model：checkbox"></a>v-model：checkbox</h4><p>复选框分为两种情况：单个勾选框和多个勾选框</p><ul><li>单个勾选框<br>1、<code>v-model</code>即为布尔值<br>2、此时<code>input</code>的<code>value</code>并不影响<code>v-model</code>的值</li><li>多个复选框<br>1、当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组<br>2、当选中某一个时，就会将<code>input</code>的<code>value</code>添加到数组中</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_38.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_39.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><h4 id="v-model：select"><a href="#v-model：select" class="headerlink" title="v-model：select"></a>v-model：select</h4><p>和checkbox一样，select也分单选和多选两种情况</p><ul><li>单选：只能选中一个值<br>1、<code>v-model</code>绑定的是一个值<br>2、当我们选中<code>option</code>中的一个时，会将它对应的<code>value</code>赋值到<code>mySelect</code>中</li><li>多选：可以选中多个值<br>1、<code>v-model</code>绑定的是一个数组<br>2、当选中多个值时，就会将选中的<code>option</code>对应的<code>value</code>添加到数组<code>mySelects</code>中</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_40.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_41.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_42.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插值操作&quot;&gt;&lt;a href=&quot;#插值操作&quot; class=&quot;headerlink&quot; title=&quot;插值操作&quot;&gt;&lt;/a&gt;插值操作&lt;/h3&gt;&lt;p&gt;如何将&lt;code&gt;data&lt;/code&gt;中的文本数据，插入到&lt;code&gt;html&lt;/code&gt;中呢？可以通过&lt;code&gt;Mu
      
    
    </summary>
    
    
      <category term="Vuejs快速学习系列" scheme="https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Vuejs" scheme="https://jasondcq.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs快速学习系列(一)   Vue初体验与MVVM</title>
    <link href="https://jasondcq.github.io/%E8%AE%A4%E8%AF%86Vuejs/"/>
    <id>https://jasondcq.github.io/%E8%AE%A4%E8%AF%86Vuejs/</id>
    <published>2020-04-11T08:46:00.000Z</published>
    <updated>2020-04-13T13:40:56.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单认识Vuejs"><a href="#简单认识Vuejs" class="headerlink" title="简单认识Vuejs"></a>简单认识Vuejs</h3><p>Vue读作/vju:/是一个渐进式的框架，这意味着你可以将Vue作为你应用的一部分嵌入其中，也可以使用Vue核心库及其生态系统，Core+Vue-router+Vuex实现各种各样的业务需求，带来更丰富的交互体验。</p><ul><li>Vue的特点</li></ul><p>1.解耦视图和数据；<br>2.可复用组件；<br>3.前端路由技术；<br>4.状态管理；<br>5.虚拟DOM；</p><h3 id="Hello-Vuejs"><a href="#Hello-Vuejs" class="headerlink" title="Hello Vuejs"></a>Hello Vuejs</h3><p>我们来编写我们的第一个Vue程序，体验一下Vue的响应式，截取代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_1.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>代码做了什么事情？我们来阅读JavaScript代码，会发现创建了一个Vue对象,在创建Vue对象的时候，传入了一些、<code>options：{}</code>，<code>{}</code>中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上,<code>{}</code>中包含了data属性,该属性中通常会存储一些数据,这些数据可以是我们直接定义出来的，比如像上面这样;也可能是来自网络，从服务器加载的。当浏览器执行到10~13行代码显然出对应的HTML，执行第16行代码创建Vue实例，并且对原HTML进行解析和修改。</p><h3 id="Vue列表显示"><a href="#Vue列表显示" class="headerlink" title="Vue列表显示"></a>Vue列表显示</h3><p>现在，我们来展示一个更加复杂的数据：数据列表；当我们现在从服务器请求过来一个列表，希望展示到<code>html</code>中，截取代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_2.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_3.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><p>在<code>html</code>代码中，使用<code>v-for</code>指令,是不是变得So Easy，我们再也不需要在JavaScript代码中完成DOM的拼接相关操作了。而且，它还是响应式的，当我们数组中的数据发生改变时，界面会自动改变。</p><h3 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h3><p>我们来看Vue的MVVM，图示如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_4.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><blockquote><p>View层：</p><blockquote><p>视图层<br>在我们前端开发中，通常就是DOM层<br>主要的作用是给用户展示各种信息</p></blockquote></blockquote><blockquote><p>Model层:</p><blockquote><p>数据层<br>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据</p></blockquote></blockquote><blockquote><p>VueModel层：</p><blockquote><p>视图模型层<br>视图模型层是View和Model沟通的桥梁<br>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中<br>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data</p></blockquote></blockquote><h3 id="Vue的options"><a href="#Vue的options" class="headerlink" title="Vue的options"></a>Vue的options</h3><p>我们在创建Vue实例的时候，传入了一个对象<code>options</code>，这个options中可以包含哪些选项呢？一般开发中主要掌握以下几点：</p><ul><li>el：<br>  1、类型：string | HTMLElement<br> 2、作用：决定之后Vue实例会管理哪一个DOM</li><li>data：<br> 1、类型：Object | Function （组件当中data必须是一个函数）<br> 2、作用：Vue实例对应的数据对象</li><li>methods：<br> 1、类型：{ [key: string]: Function }<br> 2、作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用</li></ul><h3 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h3><p>生命周期流程图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_5.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://blog.dcq.kuryun.cn/vue/img/img_6.png" alt="avatar" title="">                </div>                <div class="image-caption">avatar</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单认识Vuejs&quot;&gt;&lt;a href=&quot;#简单认识Vuejs&quot; class=&quot;headerlink&quot; title=&quot;简单认识Vuejs&quot;&gt;&lt;/a&gt;简单认识Vuejs&lt;/h3&gt;&lt;p&gt;Vue读作/vju:/是一个渐进式的框架，这意味着你可以将Vue作为你应用的一部分嵌
      
    
    </summary>
    
    
      <category term="Vuejs快速学习系列" scheme="https://jasondcq.github.io/categories/Vuejs%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Vuejs" scheme="https://jasondcq.github.io/tags/Vuejs/"/>
    
  </entry>
  
</feed>
